generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  username            String        @unique
  email               String?       @unique
  emailVerified       DateTime?
  image               String?
  discordId           String?
  discordUsername     String?
  discordAvatar       String?
  hasReceivedGreeting Boolean       @default(false)
  isBotInSharedGuild  Boolean       @default(false)
  accounts            Account[]
  sessions            Session[]
  subscriptions       Subscription?
  watchlists          Watchlist[]
}

model Project {
  id         String      @id @default(uuid())
  repo       String
  full_name  String      @unique
  owner      String
  labels     String[]    @default([])
  watchlists Watchlist[]
}

model Watchlist {
  id          String    @id @default(uuid())
  userId      String
  projectId   String
  labels      String[]
  addedAt     DateTime  @default(now())
  lastChecked DateTime?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Product {
  id                String         @id @default(uuid())
  name              String
  description       String[]
  product_id        String         @unique
  business_id       String
  is_recurring      Boolean        @default(true)
  price             Float?
  currency          String         @default("USD")
  active            Boolean        @default(true)
  trial_period_days Int?
  payment_frequency String?
  billing_interval  Int?           @default(1)
  subscriptions     Subscription[]
}

model Subscription {
  id                     String             @id @default(uuid())
  userId                 String             @unique
  status                 SubscriptionStatus
  externalSubscriptionId String             @unique
  subscriptionId         String             @unique
  productId              String
  currency               String?            @default("USD")
  amount                 Float?
  interval               String?
  intervalCount          Int?               @default(1)
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  cancelAt               DateTime?
  canceledAt             DateTime?
  trialStart             DateTime?
  trialEnd               DateTime?
  customerEmail          String?
  customerName           String?
  customerId             String?
  paymentMethodId        String?
  lastPaymentId          String?
  lastPaymentDate        DateTime?
  lastPaymentStatus      String?
  paymentFailureCount    Int                @default(0)
  lastPaymentAttempt     DateTime?
  nextBillingDate        DateTime?
  product                Product            @relation(fields: [productId], references: [product_id])
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([productId])
  @@index([customerId])
}

model PaymentRecord {
  id             String    @id @default(uuid())
  paymentId      String    @unique
  subscriptionId String?
  userId         String
  amount         Float
  currency       String    @default("USD")
  status         String
  paymentMethod  String?
  createdAt      DateTime  @default(now())
  processedAt    DateTime?
  metadata       Json?

  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  TRIAL
  EXPIRED
}
